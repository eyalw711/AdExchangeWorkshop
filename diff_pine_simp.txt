--- adx-agnet/SimpleAdNetwork.java	2016-12-13 18:10:12.531590004 +0200
+++ PineAppleAgent.java	2016-12-14 16:49:15.228628003 +0200
@@ -1,5 +1,3 @@
-
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -39,16 +37,12 @@
 import edu.umich.eecs.tac.props.Ad;
 import edu.umich.eecs.tac.props.BankStatus;
 
-/**
- * 
- * @author Mariano Schain
- * Test plug-in
- * 
- */
-public class SimpleAdNetwork extends Agent {
+
+public class PineAppleAgent extends Agent 
+{
 
 	private final Logger log = Logger
-			.getLogger(SimpleAdNetwork.class.getName());
+			.getLogger(PineAppleAgent.class.getName());
 
 	/*
 	 * Basic simulation information. An agent should receive the {@link
@@ -71,14 +65,18 @@
 	private InitialCampaignMessage initialCampaignMessage;
 	private AdNetworkDailyNotification adNetworkDailyNotification;
 
-	/*
+	public enum Day {
+	    bid, alloc, start 
+	};
+	
+	/**
 	 * The addresses of server entities to which the agent should send the daily
 	 * bids data
 	 */
 	private String demandAgentAddress;
 	private String adxAgentAddress;
 
-	/*
+	/**
 	 * we maintain a list of queries - each characterized by the web site (the
 	 * publisher), the device type, the ad type, and the user market segment
 	 */
@@ -116,58 +114,113 @@
 	private int day;
 	private String[] publisherNames;
 	private CampaignData currCampaign;
+	private long pendingCampaignBudget;
 
-	public SimpleAdNetwork() {
+	public PineAppleAgent() 
+	{
 		campaignReports = new LinkedList<CampaignReport>();
+		pendingCampaignBudget = 0;
+	}
+	
+	/**
+	 * currently works for n+2
+	 * returns the open campaigns sorted by:
+	 * @return
+	 */
+	private LinkedList<CampaignData> getAllOpenCampaignsAtDayPlus(int n)
+	{
+		int eday = day + n;
+		LinkedList<CampaignData> retList = new LinkedList<>();
+		for (Map.Entry<Integer, CampaignData> entry : myCampaigns.entrySet())
+		{
+			if (entry.getValue().dayStart <= eday && entry.getValue().dayEnd >= eday )
+			{
+				retList.add(entry.getValue());
+			}
+		}
+		return retList;
 	}
 
 	@Override
-	protected void messageReceived(Message message) {
-		try {
+	protected void messageReceived(Message message) 
+	{
+		try 
+		{
 			Transportable content = message.getContent();
 
 			// log.fine(message.getContent().getClass().toString());
 
-			if (content instanceof InitialCampaignMessage) {
+			if (content instanceof InitialCampaignMessage) 
+			{
 				handleInitialCampaignMessage((InitialCampaignMessage) content);
-			} else if (content instanceof CampaignOpportunityMessage) {
+			} 
+			else if (content instanceof CampaignOpportunityMessage) 
+			{
 				handleICampaignOpportunityMessage((CampaignOpportunityMessage) content);
-			} else if (content instanceof CampaignReport) {
+			} 
+			else if (content instanceof CampaignReport) 
+			{
 				handleCampaignReport((CampaignReport) content);
-			} else if (content instanceof AdNetworkDailyNotification) {
+			} 
+			else if (content instanceof AdNetworkDailyNotification) 
+			{
 				handleAdNetworkDailyNotification((AdNetworkDailyNotification) content);
-			} else if (content instanceof AdxPublisherReport) {
+			} 
+			else if (content instanceof AdxPublisherReport) 
+			{
 				handleAdxPublisherReport((AdxPublisherReport) content);
-			} else if (content instanceof SimulationStatus) {
+			} 
+			else if (content instanceof SimulationStatus) 
+			{
 				handleSimulationStatus((SimulationStatus) content);
-			} else if (content instanceof PublisherCatalog) {
+			}
+			else if (content instanceof PublisherCatalog) 
+			{
 				handlePublisherCatalog((PublisherCatalog) content);
-			} else if (content instanceof AdNetworkReport) {
+			}
+			else if (content instanceof AdNetworkReport) 
+			{
 				handleAdNetworkReport((AdNetworkReport) content);
-			} else if (content instanceof StartInfo) {
+			}
+			else if (content instanceof StartInfo) 
+			{
 				handleStartInfo((StartInfo) content);
-			} else if (content instanceof BankStatus) {
+			} 
+			else if (content instanceof BankStatus) 
+			{
 				handleBankStatus((BankStatus) content);
-			} else if(content instanceof CampaignAuctionReport) {
+			} 
+			else if(content instanceof CampaignAuctionReport) 
+			{
 				hadnleCampaignAuctionReport((CampaignAuctionReport) content);
-			} else if (content instanceof ReservePriceInfo) {
+			} 
+			else if (content instanceof ReservePriceInfo) 
+			{
 				// ((ReservePriceInfo)content).getReservePriceType();
-			} else {
+			} 
+			else 
+			{
 				System.out.println("UNKNOWN Message Received: " + content);
 			}
 
-		} catch (NullPointerException e) {
+		} 
+		catch (NullPointerException e) 
+		{
+			System.out.println(message.getContent().getClass().toString());
 			this.log.log(Level.SEVERE,
-					"Exception thrown while trying to parse message." + e);
+					"Exception thrown while trying to parse message." + message.getContent().getClass().toString() + e);
+			e.printStackTrace();			
 			return;
 		}
 	}
 
-	private void hadnleCampaignAuctionReport(CampaignAuctionReport content) {
+	private void hadnleCampaignAuctionReport(CampaignAuctionReport content) 
+	{
 		// ingoring - this message is obsolete
 	}
 
-	private void handleBankStatus(BankStatus content) {
+	private void handleBankStatus(BankStatus content) 
+	{
 		System.out.println("Day " + day + " :" + content.toString());
 	}
 
@@ -200,8 +253,8 @@
 	 * which bids regarding campaign opportunities may be sent in subsequent
 	 * days) are also reported in the initial campaign message
 	 */
-	private void handleInitialCampaignMessage(
-			InitialCampaignMessage campaignMessage) {
+	private void handleInitialCampaignMessage(InitialCampaignMessage campaignMessage) 
+	{
 		System.out.println(campaignMessage.toString());
 
 		day = 0;
@@ -229,14 +282,12 @@
 	 * (on day n) related bids (attempting to win the campaign). The allocation
 	 * (the winner) is announced to the competing agents during day n + 1.
 	 */
-	private void handleICampaignOpportunityMessage(
-			CampaignOpportunityMessage com) {
-
+	private void handleICampaignOpportunityMessage(CampaignOpportunityMessage com) 
+	{
 		day = com.getDay();
 
 		pendingCampaign = new CampaignData(com);
 		System.out.println("Day " + day + ": Campaign opportunity - " + pendingCampaign);
-		System.out.println("DEBUG " + pendingCampaign);
 		
 		/*
 		 * The campaign requires com.getReachImps() impressions. The competing
@@ -248,8 +299,20 @@
 		 */
 
 		Random random = new Random();
-		long cmpimps = com.getReachImps();
-		long cmpBidMillis = random.nextInt((int)cmpimps);
+		long cmpBidMillis;
+		long campaignRequiredImps = com.getReachImps();
+		
+		LinkedList<CampaignData> openCampaigns = getAllOpenCampaignsAtDayPlus(2);
+		if (openCampaigns.isEmpty() && !biddedYesterday() && numOfCampaignsCompleted() <= 4)
+		{
+			cmpBidMillis = (int)(campaignRequiredImps+500)/10;
+		}
+		else
+		{
+			cmpBidMillis = 40000;
+		}
+		pendingCampaignBudget = cmpBidMillis;
+		//pendingCampaign.setBudget(cmpBidMillis);	
 
 		System.out.println("Day " + day + ": Campaign total budget bid (millis): " + cmpBidMillis);
 
@@ -258,11 +321,14 @@
 		 * user classification service is piggybacked
 		 */
 
-		if (adNetworkDailyNotification != null) {
+		if (adNetworkDailyNotification != null) 
+		{
 			double ucsLevel = adNetworkDailyNotification.getServiceLevel();
-			ucsBid = 0.1 + random.nextDouble()/10.0;			
+			ucsBid = 0; //0.1 + random.nextDouble()/10.0;			
 			System.out.println("Day " + day + ": ucs level reported: " + ucsLevel);
-		} else {
+		} 
+		else 
+		{
 			System.out.println("Day " + day + ": Initial ucs bid is " + ucsBid);
 		}
 
@@ -271,6 +337,28 @@
 		sendMessage(demandAgentAddress, bids);
 	}
 
+	private int numOfCampaignsCompleted()
+	{
+		int retval = 0;
+		for (Map.Entry<Integer, CampaignData> entry : myCampaigns.entrySet())
+		{
+			if (entry.getValue().impsTogo() <= 0)
+				retval++;
+		}
+		System.out.println("############### day:" + day + " number of campaigns completed:"+retval);
+		return retval;
+	}
+	
+	
+	private boolean biddedYesterday() 
+	{
+		System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@" + pendingCampaign.budget);
+		if (pendingCampaignBudget == 40000)
+			return false;
+		else
+			return true;
+	}
+
 	/**
 	 * On day n ( > 0), the result of the UserClassificationService and Campaign
 	 * auctions (for which the competing agents sent bids during day n -1) are
@@ -278,7 +366,8 @@
 	 * classification service level is applicable starting from day n+1.
 	 */
 	private void handleAdNetworkDailyNotification(
-			AdNetworkDailyNotification notificationMessage) {
+			AdNetworkDailyNotification notificationMessage) 
+	{
 
 		adNetworkDailyNotification = notificationMessage;
 
@@ -289,7 +378,8 @@
 				+ notificationMessage.getWinner();
 
 		if ((pendingCampaign.id == adNetworkDailyNotification.getCampaignId())
-				&& (notificationMessage.getCostMillis() != 0)) {
+				&& (notificationMessage.getCostMillis() != 0)) 
+		{
 
 			/* add campaign to list of won campaigns */
 			pendingCampaign.setBudget(notificationMessage.getCostMillis()/1000.0);
@@ -322,17 +412,14 @@
 	/**
 	 * 
 	 */
-	protected void sendBidAndAds() {
+	protected void sendBidAndAds() 
+	{
 
 		bidBundle = new AdxBidBundle();
 
-		/*
-		 * 
-		 */
-
 		int dayBiddingFor = day + 1;
 
-		Random random = new Random();
+		//Random random = new Random();
 
 		/* A random bid, fixed for all queries of the campaign */
 		/*
@@ -340,7 +427,7 @@
 		 * revenue per imp
 		 */
 
-		double rbid = 10.0*random.nextDouble();
+		double rbid = 5.0; //10.0*random.nextDouble();
 
 		/*
 		 * add bid entries w.r.t. each active campaign with remaining contracted
@@ -352,47 +439,62 @@
 
 		if ((dayBiddingFor >= currCampaign.dayStart)
 				&& (dayBiddingFor <= currCampaign.dayEnd)
-				&& (currCampaign.impsTogo() > 0)) {
+				&& (currCampaign.impsTogo() > 0)) 
+		{
 
 			int entCount = 0;
-
-			for (AdxQuery query : currCampaign.campaignQueries) {
-				if (currCampaign.impsTogo() - entCount > 0) {
+			for (CampaignData campData : getAllOpenCampaignsAtDayPlus(1))
+			{
+				for (AdxQuery query : campData.campaignQueries) 
+				{
+					if (campData.impsTogo() - entCount > 0) 
+					{
 					/*
 					 * among matching entries with the same campaign id, the AdX
 					 * randomly chooses an entry according to the designated
 					 * weight. by setting a constant weight 1, we create a
 					 * uniform probability over active campaigns(irrelevant because we are bidding only on one campaign)
 					 */
-					if (query.getDevice() == Device.pc) {
-						if (query.getAdType() == AdType.text) {
+						if (query.getDevice() == Device.pc) 
+						{
+							if (query.getAdType() == AdType.text) 
+							{
 							entCount++;
-						} else {
-							entCount += currCampaign.videoCoef;
 						}
-					} else {
-						if (query.getAdType() == AdType.text) {
-							entCount+=currCampaign.mobileCoef;
-						} else {
-							entCount += currCampaign.videoCoef + currCampaign.mobileCoef;
+							else 
+							{
+								entCount += campData.videoCoef;
+							}
+						} 
+						else 
+						{
+							if (query.getAdType() == AdType.text) 
+							{
+								entCount+=campData.mobileCoef;
+							} 
+							else 
+							{
+								entCount += campData.videoCoef + campData.mobileCoef;
 						}
-
 					}
 					bidBundle.addQuery(query, rbid, new Ad(null),
-							currCampaign.id, 1);
+								campData.id, 1);
 				}
 			}
 
-			double impressionLimit = currCampaign.impsTogo();
-			double budgetLimit = currCampaign.budget;
-			bidBundle.setCampaignDailyLimit(currCampaign.id,
+				double impressionLimit = campData.impsTogo();
+				double budgetLimit = campData.budget;
+				bidBundle.setCampaignDailyLimit(campData.id,
 					(int) impressionLimit, budgetLimit);
 
 			System.out.println("Day " + day + ": Updated " + entCount
-					+ " Bid Bundle entries for Campaign id " + currCampaign.id);
+						+ " Bid Bundle entries for Campaign id " + campData.id);
+			}
+
 		}
 
-		if (bidBundle != null) {
+		if (bidBundle != null) 
+		{
 			System.out.println("Day " + day + ": Sending BidBundle");
 			sendMessage(adxAgentAddress, bidBundle);
 		}
@@ -401,7 +503,8 @@
 	/**
 	 * Campaigns performance w.r.t. each allocated campaign
 	 */
-	private void handleCampaignReport(CampaignReport campaignReport) {
+	private void handleCampaignReport(CampaignReport campaignReport) 
+	{
 
 		campaignReports.add(campaignReport);
 
@@ -409,10 +512,10 @@
 		 * for each campaign, the accumulated statistics from day 1 up to day
 		 * n-1 are reported
 		 */
-		for (CampaignReportKey campaignKey : campaignReport.keys()) {
+		for (CampaignReportKey campaignKey : campaignReport.keys()) 
+		{
 			int cmpId = campaignKey.getCampaignId();
-			CampaignStats cstats = campaignReport.getCampaignReportEntry(
-					campaignKey).getCampaignStats();
+			CampaignStats cstats = campaignReport.getCampaignReportEntry(campaignKey).getCampaignStats();
 			myCampaigns.get(cmpId).setStats(cstats);
 
 			System.out.println("Day " + day + ": Updating campaign " + cmpId + " stats: "
@@ -425,9 +528,11 @@
 	/**
 	 * Users and Publishers statistics: popularity and ad type orientation
 	 */
-	private void handleAdxPublisherReport(AdxPublisherReport adxPublisherReport) {
+	private void handleAdxPublisherReport(AdxPublisherReport adxPublisherReport) 
+	{
 		System.out.println("Publishers Report: ");
-		for (PublisherCatalogEntry publisherKey : adxPublisherReport.keys()) {
+		for (PublisherCatalogEntry publisherKey : adxPublisherReport.keys()) 
+		{
 			AdxPublisherReportEntry entry = adxPublisherReport
 					.getEntry(publisherKey);
 			System.out.println(entry.toString());
@@ -438,7 +543,8 @@
 	 * 
 	 * @param AdNetworkReport
 	 */
-	private void handleAdNetworkReport(AdNetworkReport adnetReport) {
+	private void handleAdNetworkReport(AdNetworkReport adnetReport) 
+	{
 
 		System.out.println("Day " + day + " : AdNetworkReport");
 		/*
@@ -451,7 +557,8 @@
 	}
 
 	@Override
-	protected void simulationSetup() {
+	protected void simulationSetup() 
+	{
 		Random random = new Random();
 
 		day = 0;
@@ -462,10 +569,12 @@
 
 		myCampaigns = new HashMap<Integer, CampaignData>();
 		log.fine("AdNet " + getName() + " simulationSetup");
+		
 	}
 
 	@Override
-	protected void simulationFinished() {
+	protected void simulationFinished() 
+	{
 		campaignReports.clear();
 		bidBundle = null;
 	}
@@ -480,18 +589,22 @@
 	 * publisher names reported at game initialization in the publishers catalog
 	 * message
 	 */
-	private void generateAdxQuerySpace() {
-		if (publisherCatalog != null && queries == null) {
+	private void generateAdxQuerySpace() 
+	{
+		if (publisherCatalog != null && queries == null) 
+		{
 			Set<AdxQuery> querySet = new HashSet<AdxQuery>();
 
 			/*
 			 * for each web site (publisher) we generate all possible variations
 			 * of device type, ad type, and user market segment
 			 */
-			for (PublisherCatalogEntry publisherCatalogEntry : publisherCatalog) {
+			for (PublisherCatalogEntry publisherCatalogEntry : publisherCatalog) 
+			{
 				String publishersName = publisherCatalogEntry
 						.getPublisherName();
-				for (MarketSegment userSegment : MarketSegment.values()) {
+				for (MarketSegment userSegment : MarketSegment.values()) 
+				{
 					Set<MarketSegment> singleMarketSegment = new HashSet<MarketSegment>();
 					singleMarketSegment.add(userSegment);
 
@@ -530,12 +643,15 @@
 		}
 	}
 	
-	/*genarates an array of the publishers names
+	/*generates an array of the publishers names
 	 * */
-	private void getPublishersNames() {
-		if (null == publisherNames && publisherCatalog != null) {
+	private void getPublishersNames() 
+	{
+		if (null == publisherNames && publisherCatalog != null) 
+		{
 			ArrayList<String> names = new ArrayList<String>();
-			for (PublisherCatalogEntry pce : publisherCatalog) {
+			for (PublisherCatalogEntry pce : publisherCatalog) 
+			{
 				names.add(pce.getPublisherName());
 			}
 
@@ -544,11 +660,13 @@
 		}
 	}
 	/*
-	 * genarates the campaign queries relevant for the specific campaign, and assign them as the campaigns campaignQueries field 
+	 * generates the campaign queries relevant for the specific campaign, and assign them as the campaigns campaignQueries field 
 	 */
-	private void genCampaignQueries(CampaignData campaignData) {
+	private void genCampaignQueries(CampaignData campaignData) 
+	{
 		Set<AdxQuery> campaignQueriesSet = new HashSet<AdxQuery>();
-		for (String PublisherName : publisherNames) {
+		for (String PublisherName : publisherNames) 
+		{
 			campaignQueriesSet.add(new AdxQuery(PublisherName,
 					campaignData.targetSegment, Device.mobile, AdType.text));
 			campaignQueriesSet.add(new AdxQuery(PublisherName,
@@ -562,11 +680,10 @@
 		campaignData.campaignQueries = new AdxQuery[campaignQueriesSet.size()];
 		campaignQueriesSet.toArray(campaignData.campaignQueries);
 		System.out.println("!!!!!!!!!!!!!!!!!!!!!!"+Arrays.toString(campaignData.campaignQueries)+"!!!!!!!!!!!!!!!!");
-		
-
 	}
 
-	private class CampaignData {
+	private class CampaignData 
+	{
 		/* campaign attributes as set by server */
 		Long reachImps;
 		long dayStart;
@@ -575,13 +692,14 @@
 		double videoCoef;
 		double mobileCoef;
 		int id;
-		private AdxQuery[] campaignQueries;//array of queries relvent for the campaign.
+		private AdxQuery[] campaignQueries;//array of queries relevant for the campaign.
 
 		/* campaign info as reported */
 		CampaignStats stats;
 		double budget;
 
-		public CampaignData(InitialCampaignMessage icm) {
+		public CampaignData(InitialCampaignMessage icm) 
+		{
 			reachImps = icm.getReachImps();
 			dayStart = icm.getDayStart();
 			dayEnd = icm.getDayEnd();
@@ -594,11 +712,13 @@
 			budget = 0.0;
 		}
 
-		public void setBudget(double d) {
+		public void setBudget(double d) 
+		{
 			budget = d;
 		}
 
-		public CampaignData(CampaignOpportunityMessage com) {
+		public CampaignData(CampaignOpportunityMessage com) 
+		{
 			dayStart = com.getDayStart();
 			dayEnd = com.getDayEnd();
 			id = com.getId();
@@ -611,25 +731,30 @@
 		}
 
 		@Override
-		public String toString() {
+		public String toString() 
+		{
 			return "Campaign ID " + id + ": " + "day " + dayStart + " to "
 					+ dayEnd + " " + targetSegment + ", reach: " + reachImps
 					+ " coefs: (v=" + videoCoef + ", m=" + mobileCoef + ")";
 		}
 
-		int impsTogo() {
+		int impsTogo() 
+		{
 			return (int) Math.max(0, reachImps - stats.getTargetedImps());
 		}
 
-		void setStats(CampaignStats s) {
+		void setStats(CampaignStats s) 
+		{
 			stats.setValues(s);
 		}
 
-		public AdxQuery[] getCampaignQueries() {
+		public AdxQuery[] getCampaignQueries() 
+		{
 			return campaignQueries;
 		}
 
-		public void setCampaignQueries(AdxQuery[] campaignQueries) {
+		public void setCampaignQueries(AdxQuery[] campaignQueries) 
+		{
 			this.campaignQueries = campaignQueries;
 		}
 
